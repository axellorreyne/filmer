version: "3.7"

services:
    backend:
      build:
        context: .
        target: ${TARGET:-production}
      hostname: backend
      volumes:
        - '.:/code'
      command: gunicorn backend.wsgi:application -c gunicorn.config.py --bind 0.0.0.0:80 --log-file=- --log-level debu --log-file=- --log-level debug
      networks:
        - backend
        - traefik
      restart: always
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.backend.rule=PathPrefix(`/admin`)"
        # - "traefik.http.routers.${VERSION}_backend.tls=true"
        # - "traefik.http.routers.${VERSION}_backend.tls.certresolver=letsencrypt"
        - "traefik.http.routers.backend.entrypoints=web"
        - "traefik.http.services.backend.loadbalancer.server.port=80"

    frontend:
      build:
        context: ./frontend
        target: ${TARGET:-production}
      hostname: frontend
      volumes:
        - './frontend:/code'
      command: npm start
      restart: always
      networks:
        - traefik
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.frontend.rule=PathPrefix(`/`)"
        # - "traefik.http.routers.${VERSION}_frontend.tls=true"
        # - "traefik.http.routers.${VERSION}_frontend.tls.certresolver=letsencrypt"
        - "traefik.http.routers.frontend.entrypoints=web"
        - "traefik.http.services.frontend.loadbalancer.server.port=80"

networks:
  traefik:
    external: true
    # TODO: make traefik docker compose
  backend:

# TODO: Database docker-compose
