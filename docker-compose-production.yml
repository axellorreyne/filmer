version: "3.7"

services:
    backend:
      build:
        context: .
        target: ${TARGET:-production}
      hostname: backend
      volumes:
        - '.:/code'
      command: python manage.py runserver 0.0.0.0:8000
      networks:
        - backend
        - traefik
      restart: always
      deploy:
        replicas: 1
        restart_policy:
          condition: on-failure
        labels:
          - "traefik.enable=true"
          - "traefik.http.routers.${VERSION}_backend.rule=Host(`$DOMAIN`)"
          - "traefik.http.routers.${VERSION}_backend.tls=true"
          - "traefik.http.routers.${VERSION}_backend.tls.certresolver=letsencrypt"
          - "traefik.http.routers.${VERSION}_backend.entrypoints=websecure"
          - "traefik.http.routers.${VERSION}_backend.middlewares=${VERSION}_backend-proxy"
          - "traefik.http.services.${VERSION}_backend.loadbalancer.server.port=80"

    frontend:
      build:
        context: ./frontend
        target: ${TARGET:-production}
      hostname: frontend
      volumes:
        - './frontend:/code'
      command: npm start
      restart: always
      networks:
        - traefik
      deploy:
        replicas: 1
        restart_policy:
          condition: on-failure
        labels:
          - "traefik.enable=true"
          - "traefik.http.routers.${VERSION}_frontend.rule=Host(`$DOMAIN`)"
          - "traefik.http.routers.${VERSION}_frontend.tls=true"
          - "traefik.http.routers.${VERSION}_frontend.tls.certresolver=letsencrypt"
          - "traefik.http.routers.${VERSION}_frontend.entrypoints=websecure"
          - "traefik.http.services.${VERSION}_frontend.loadbalancer.server.port=80"

networks:
  traefik:
    external: true
    # TODO: make traefik docker compose
  backend:

# TODO: Database docker-compose
